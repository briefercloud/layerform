// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Refresh is an autogenerated mock type for the Refresh type
type Refresh struct {
	mock.Mock
}

type Refresh_Expecter struct {
	mock *mock.Mock
}

func (_m *Refresh) EXPECT() *Refresh_Expecter {
	return &Refresh_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, definitionName, instanceName, vars
func (_m *Refresh) Run(ctx context.Context, definitionName string, instanceName string, vars []string) error {
	ret := _m.Called(ctx, definitionName, instanceName, vars)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, definitionName, instanceName, vars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Refresh_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - definitionName string
//   - instanceName string
//   - vars []string
func (_e *Refresh_Expecter) Run(ctx interface{}, definitionName interface{}, instanceName interface{}, vars interface{}) *Refresh_Run_Call {
	return &Refresh_Run_Call{Call: _e.mock.On("Run", ctx, definitionName, instanceName, vars)}
}

func (_c *Refresh_Run_Call) Run(run func(ctx context.Context, definitionName string, instanceName string, vars []string)) *Refresh_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *Refresh_Run_Call) Return(_a0 error) *Refresh_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Refresh_Run_Call) RunAndReturn(run func(context.Context, string, string, []string) error) *Refresh_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefresh creates a new instance of Refresh. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefresh(t interface {
	mock.TestingT
	Cleanup(func())
}) *Refresh {
	mock := &Refresh{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
